ORG 100h          ; Устанавливает начальный адрес загрузки программы в 100h (256 байт), что типично для COM-файлов в MS-DOS.
start:
    ; очистка экрана (переключение в текстовый режим 80x25):
    mov ax, 3      ; Загружаем в регистр AX значение 3 (код текстового режима 80x25).
    int 10h        ; Вызываем прерывание BIOS 10h для установки видеорежима.

    ; открываем линию A20 (для 32-битной адресации):
    in al, 92h     ; Читаем текущий статус порта A20 в регистр AL.
    or al, 2       ; Устанавливаем бит 1 в AL, чтобы активировать линию A20.
    out 92h, al    ; Записываем измененное значение обратно в порт 92h.

    ; вычисляем линейный адрес точки входа в защищенный режим
    xor eax, eax   ; Обнуляем регистр EAX.
    mov ax, cs     ; Загружаем текущий сегментный регистр CS в AX.
    shl eax, 4     ; Сдвигаем значение в AX на 4 бита влево для получения базового адреса сегмента.
    add eax, PROTECTED_MODE_ENTRY_POINT ; Добавляем смещение точки входа в защищенный режим.
    mov [ENTRY_OFF], eax ; Сохраняем вычисленный линейный адрес в переменную ENTRY_OFF.

    ; теперь надо вычислить линейный адрес GDT
    xor eax, eax   ; Обнуляем регистр EAX.
    mov ax, cs     ; Загружаем текущий сегментный регистр CS в AX.
    shl eax, 4     ; Сдвигаем значение в AX на 4 бита влево для получения базового адреса сегмента.
    add ax, GDT    ; Добавляем смещение до GDT.

    ; линейный адрес GDT кладем в заранее подготовленную переменную:
    mov dword [GDTR+2], eax ; Сохраняем вычисленный линейный адрес GDT в переменную GDTR.

    ; загрузка регистра GDTR:
    lgdt fword [GDTR] ; Загружаем регистр GDTR с помощью команды lgdt.

    ; запрет всех прерываний:
    cli             ; Отключаем все аппаратные прерывания.
    in al, 70h      ; Читаем текущее значение из порта 70h.
    or al, 80h      ; Устанавливаем бит 7 для отключения прерываний.
    out 70h, al     ; Записываем измененное значение обратно в порт 70h.

    ; переключение в защищенный режим:
    mov eax, cr0    ; Читаем текущее значение регистра CR0 в EAX.
    or al, 1        ; Устанавливаем бит PE (Protection Enable) для включения защищенного режима.
    mov cr0, eax    ; Записываем измененное значение обратно в CR0.

    ; загрузить новый селектор в регистр CS
    db 66h          ; Префикс изменения разрядности операнда (для использования 32-битных данных).
    db 0EAh         ; Опкод команды JMP FAR (дальняя безусловная передача управления).
    ENTRY_OFF dd PROTECTED_MODE_ENTRY_POINT ; 32-битное смещение до точки входа в защищенный режим.
    dw 00001000b    ; Селектор первого дескриптора (кодовый сегмент).

; ГЛОБАЛЬНАЯ ТАБЛИЦА ДЕСКРИПТОРОВ
GDT:
    NULL_descr db 8 dup(0)   ; Нулевой дескриптор (не используется).
    CODE_descr db 0FFh,0FFh,00h,00h,00h,10011010b,11001111b,00h ; Кодовый сегмент.
    DATA_descr db 0FFh,0FFh,00h,00h,00h,10010010b,11001111b,00h ; Дескриптор данных.
    VIDEO_descr db 0FFh,0FFh,00h,80h,0Bh,10010010b,01000000b,00h ; Видеопамять.
    
GDT_size equ $-GDT           ; Размер GDT.
label GDTR fword             ; Определяем метку GDTR как fword (6 байт).
dw GDT_size-1                ; Лимит GDT (размер минус один).
dd ?                         ; Здесь будет линейный адрес GDT.

use32                        ; Далее следует 32-битный код.

PROTECTED_MODE_ENTRY_POINT:
    ; загрузим сегментные регистры требуемыми селекторами
    mov ax, 00010000b        ; Загружаем селектор кодового сегмента.
    mov bx, ds               ; Сохраняем текущий сегмент данных в BX.
    mov ds, ax               ; Устанавливаем новый селектор для DS.
    mov ax, 00011000b        ; Загружаем селектор сегмента данных.
    mov es, ax               ; Устанавливаем новый селектор для ES.
    
    xor esi, esi             ; Обнуляем регистр ESI.
    mov si, bx               ; Загружаем сохраненное значение DS в SI.
    
    shl esi, 4               ; Сдвигаем значение в SI на 4 бита влево для получения базового адреса сегмента.
    add esi, message         ; Добавляем смещение до сообщения.
    
    xor edi, edi             ; Обнуляем регистр EDI.
    
    mov ecx, 20              ; Устанавливаем счетчик ECX на длину сообщения (20 байт).

    ; вывод на экран:
    rep movsb                ; Копируем байты из источника (ESI) в приемник (EDI), уменьшая ECX до нуля.
    
    jmp $                    ; Бесконечный цикл (остановка программы).

message db "1515151515"      ; Сообщение для вывода на экран.